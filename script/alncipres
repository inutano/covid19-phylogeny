#!/usr/bin/perl
use strict;
use warnings;
use XML::Twig;
use Getopt::Long;
use Data::Dumper;
use LWP::UserAgent;
use YAML qw(LoadFile);
use Bio::Phylo::Util::Logger ':levels';

# process command line arguments
my $verbosity = INFO;
my $infile;
my $yml;
GetOptions(
	'infile=s' => \$infile,
	'yaml=s'   => \$yml,
	'verbose+' => \$verbosity,
);

Bio::Phylo::Util::Logger->new( '-level' => $verbosity, '-class' => 'main' );
print align( $infile, $yml );

# given $infile and $yml location, returns aligned FASTA
sub align {
	my ( $infile, $yml ) = @_;
	INFO "infile: $infile - YAML: $yml";
	my $info = LoadFile($yml);
	
	# launch the job
	my $status_url = launch_aln( $info, $infile );
	
	# poll results
	my $fasta;
	POLL: while ( 1 ) {
		my $status = check_status( $info, $infile, $status_url );
		if ( $status->{'completed'} eq 'true' ) {
			my $outfiles = $status->{'outfiles'};
			$fasta = get_result( $info, $infile, $outfiles );
			last POLL;
		}
		sleep 60;
	}
	return $fasta;
}

# given $info, $infile, $outfiles, returns FASTA string
sub get_result {
	my ( $info, $infile, $outfiles ) = @_;
	my $command = status_command( $info, $infile, $outfiles );
	my $result = `$command`;
	my $location;
	DEBUG $result;
	XML::Twig->new(
		'twig_handlers' => {
			'results/jobfiles/jobfile' => sub {
				my $node = $_;
				if ( $node->findvalue('filename') eq 'output.fasta' ) {
					$location = $node->findvalue('downloadUri/url');
				}
				DEBUG $node->toString;
			}
		}
	)->parse($result);
	my $resultcommand = status_command( $info, $infile, $location );
	return `$resultcommand`;
}

# given $info and $infile, returns $status_url
sub launch_aln {
	my ( $info, $infile ) = @_;
	my $command = aln_command( $info, $infile );

	# run submission, parse result
	my $status_url;	
	my $result = `$command`;
	DEBUG $result;
	XML::Twig->new(
		'twig_handlers' => {
			'jobstatus/selfUri/url' => sub { $status_url = $_->text }
		}
	)->parse($result);
	INFO $status_url;
	return $status_url;
}

# given $info and $infile, composes cURL command to launch MUSCLE job
sub aln_command {
	my ( $info, $infile ) = @_;
	my $CRA_USER = $info->{'CRA_USER'};
	my $PASSWORD = $info->{'PASSWORD'};
	my $KEY      = $info->{'KEY'};
	my $URL      = $info->{'URL'};	
	my $command = <<"CURL_COMMAND";
curl \\
	--silent \\
	-u $CRA_USER:$PASSWORD \\
	-H cipres-appkey:$KEY \\
	$URL/job/$CRA_USER \\
	-F tool=MUSCLE  \\
	-F input.infile_=\@$infile \\
	-F metadata.statusEmail=true \\
	-F vparam.runtime_=2.0
CURL_COMMAND
	DEBUG $command;
	return $command;
}

# given $info, $infile and $status_url, checks and returns terminalStage
sub check_status {
	my ( $info, $infile, $status_url ) = @_;
	my $command = status_command( $info, $infile, $status_url );
	
	# post request, fetch result
	my ( $status, $outfiles );
	my $result = `$command`;
	DEBUG $result;
	XML::Twig->new(
		'twig_handlers' => {
			'jobstatus/resultsUri/url' => sub { $outfiles = $_->text },
			'jobstatus/terminalStage'  => sub { $status   = $_->text }			
		}
	)->parse($result);
	my $time = localtime();
	INFO "[$time] $infile completed: $status";
	return { 'completed' => $status, 'outfiles' => $outfiles };
}

# given $info, $infile and $status_url, composes cURL command to check status
sub status_command {
	my ( $info, $infile, $status_url ) = @_;
	my $CRA_USER = $info->{'CRA_USER'};
	my $PASSWORD = $info->{'PASSWORD'};
	my $KEY      = $info->{'KEY'};
	my $command = <<"CURL_COMMAND";
curl \\
	--silent \\
	-u $CRA_USER:$PASSWORD \\
	-H cipres-appkey:$KEY \\
	$status_url
CURL_COMMAND
	DEBUG $command;
	return $command;
}

